#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const dirs = [
  'public/pages/home',
  'public/pages/admin',
  'public/pages/auth',
  'public/partials',
  'js',
  'styles',
  'assets',
  'htmx',
  'vercel/api/auth',
  'snapshots'
];

const files = {
  'public/pages/index.html': '<h1>Home Page</h1>',
  'public/pages/about.html': '<h1>About Page</h1>',
  'public/pages/home/dashboard.html': '<h2>Dashboard</h2>',
  'public/pages/home/profile.html': '<h2>Profile</h2>',
  'public/pages/admin/settings.html': '<h2>Settings</h2>',
  'public/pages/auth/login.html': '<h2>Login</h2>',
  'public/pages/auth/register.html': '<h2>Register</h2>',

  'public/partials/head.html': '<meta charset="UTF-8">\n<title>App Scaffold</title>',
  'public/partials/navbar.html': '<nav class="mdc-top-app-bar"><div class="mdc-top-app-bar__row"><section class="mdc-top-app-bar__section mdc-top-app-bar__section--align-start"><span class="mdc-top-app-bar__title">🧱 App Scaffold</span></section></div></nav>',
  'public/partials/footer.html': '<footer style="text-align: center; padding: 1rem;"><small>© 2025 Your Name. Built with love and HTMX.</small></footer>',
  'public/partials/modal.html': '<div id="modal" class="modal hidden">Modal Content</div>',
  'public/partials/toast.html': '<div id="toast" class="toast hidden">Toast Message</div>',

  'js/db.js': '// db.js - IndexedDB logic here',
  'js/ui.js': '// ui.js - UI event handlers',
  'js/init.js': '// init.js - app startup code',
  'js/api.js': '// api.js - fetch calls or Vercel API logic',
  'js/auth.js': 'function saveUserSession(user) { localStorage.setItem("user", JSON.stringify(user)); } function logout() { localStorage.removeItem("user"); location.href = "/pages/auth/login.html"; }',

  'styles/material.css': '/* Material UI base overrides */',
  'styles/custom.css': '/* Custom user styles */',

  'htmx/router.js': '// router.js for page routing (optional)',
  'htmx/includes.js': '// includes.js for loading partials',

  'vercel/api/auth/login.js': `export const config = { runtime: 'edge' };
export default async function handler(req) {
  const { email, password } = await req.json();
  if (!email || !password) return new Response('Missing credentials', { status: 400 });
  const dbKey = \`user:\${email}\`;
  const res = await fetch(\`\${process.env.KV_URL}/\${dbKey}\`);
  if (res.status !== 200) return new Response('User not found', { status: 404 });
  const user = await res.json();
  if (user.password !== password) return new Response('Incorrect password', { status: 401 });
  return new Response('Login successful', { status: 200 });
}`,

  'vercel/api/auth/register.js': `export const config = { runtime: 'edge' };
export default async function handler(req) {
  const { email, password } = await req.json();
  if (!email || !password || password.length < 6)
    return new Response('Invalid input', { status: 400 });
  const dbKey = \`user:\${email}\`;
  const existing = await fetch(\`\${process.env.KV_URL}/\${dbKey}\`);
  if (existing.status === 200)
    return new Response('User already exists', { status: 409 });
  await fetch(\`\${process.env.KV_URL}/\${dbKey}\`, {
    method: 'PUT',
    body: JSON.stringify({ email, password })
  });
  return new Response('Registered successfully', { status: 200 });
}`,

  'vercel/edge-functions.js': '// shared edge function helpers for Vercel setup',
  'assets/logo.png': '',
  'README.md': '# App Scaffold\n\nGenerated by scaffold.js. Edit as needed.'
};

// ✅ Snapshot Generator

const ignoreDirs = ['node_modules', 'dist', '.git', 'release'];
const alwaysInclude = ['public', 'js', 'styles', 'vercel', 'htmx', 'assets'];
const rootFiles = ['README.md', 'generate-snapshot.js'];

const now = new Date();
const date = now.toLocaleDateString('en-US').replace(/\//g, '-'); // MM-DD-YYYY
const time = now.toLocaleTimeString('en-US', { hour12: true }).replace(/:/g, '-').replace(/ /g, '');
const timestamp = `${date}_${time}`;

const snapshotDir = 'snapshots';
const snapshotFile = `project-snapshot-${timestamp}.md`;
const fullPath = path.join(snapshotDir, snapshotFile);

function walk(dir, depth = 0) {
  const pad = '  '.repeat(depth);
  let output = '';
  const entries = fs.readdirSync(dir, { withFileTypes: true });

  for (const entry of entries) {
    const full = path.join(dir, entry.name);
    if (ignoreDirs.includes(entry.name)) continue;
    if (entry.name === snapshotDir || full === __filename) continue;

    output += `${pad}- ${entry.name}\n`;
    if (entry.isDirectory()) {
      output += walk(full, depth + 1);
    }
  }

  return output;
}

function generateSnapshot() {
  if (!fs.existsSync(snapshotDir)) fs.mkdirSync(snapshotDir);

  let snapshot = '# Project Structure\n\n';

  // Include folder trees
  for (const root of alwaysInclude) {
    if (fs.existsSync(root)) {
      snapshot += `\n## ${root}\n\n`;
      snapshot += walk(root) + '\n';
    }
  }

  // Include root-level files
  snapshot += '\n## Root Files\n\n';
  for (const file of rootFiles) {
    if (fs.existsSync(file)) {
      snapshot += `- ${file}\n`;
    }
  }

  fs.writeFileSync(fullPath, snapshot, 'utf8');
  console.log(`📸 Snapshot saved: ${fullPath}`);
}

generateSnapshot();


const checkAndPrompt = () => {
  const alreadyExists = fs.existsSync('public');
  if (!alreadyExists) return writeFiles('merge');

  rl.question('⚠️  Project already exists. Overwrite completely? (y/n): ', answer => {
    rl.close();
    const mode = answer.trim().toLowerCase() === 'y' ? 'overwrite' : 'merge';
    writeFiles(mode);
  });
};

checkAndPrompt();
